%
\newSymbol{instance}{\ensuremath{\mathcal{I}}}{I}{%
the problem instance data, see \cref{def:instance}}%
\newSymbol{solutionSpace}{\mathSpace{Y}}{Y}{%
the solution space, i.e., the set of possible solutions to an optimization problem, see \cref{def:solutionSpace}}%
\newSymbol{solspel}{\ensuremath{y}}{y}{%
a candidate solution to an optimization problem, i.e., an element of the solution space~\solutionSpace, see \cref{def:candidateSolution}}%
%
\newFunc{objf}{\ensuremath{f}}{f(y)}{y}{%
an objective function~$f:\solutionSpace\mapsto\realNumbers$ computes the cost of a candidate solution~$\solspel\in\solutionSpace$, see \cref{def:objectiveFunction}}%
%
\protected\gdef\searchSpaceSubset{\ensuremath{X}}%
%
\newSymbol{searchSpace}{\mathSpace{\searchSpaceSubset}}{X}{%
the search space, i.e., the candidate solutions of an optimization problem, but in an encoded form that is easier to be processed with search operators, see \cref{def:searchSpace}}%
\newSymbol{sespel}{\ensuremath{x}}{x}{%
an element of the search space~\searchSpace, see \cref{def:searchSpacePoint}}%
%
\newFunc{decode}{\ensuremath{\gamma}}{g(x)}{x}{%
the decoding function~$\gamma:\searchSpace\mapsto\solutionSpace$ maps the candidate solutions from their encoded form (a point in the search space~\searchSpace\ that is processed by search operators) to their decoded, human-understandable form (a point in the solution space~\solutionSpace\ that can be processed by the objective function~\objf), see \cref{def:decoding}}%
%
\DeclareMathOperator{\@searchOp}{move}%
\newFunc{searchOp}{\ensuremath{\@searchOp}}{move(x)}{x}{%
A search operator $\@searchOp:\random\times\searchSpace^k\mapsto\searchSpace$ with $k\in\naturalNumbersZ$ takes zero or more points from the search space~\searchSpace\ together with a source~\random\ of randomness as input and produces one new element of~\searchSpace\ as output, see \cref{def:searchOp}}%
%
\newSymbol{obspel}{\ensuremath{z}}{z}{%
an objective value returned by the objective function~\objf, see \cref{def:objectiveValue}}%
\newSymbol{goalF}{\ensuremath{z_g}}{zg}{%
a goal objective value~$z_g$ is a pre-defined limit at which the optimization process can stop, i.e., if a solution~\solspel\ with $\objfOf{\solspel}\leq z_g$ is discovered, the optimization process can terminate and \shouldTerminate\ becomes \codeil{True}, see \cref{sec:termination:defs}.}%
%
\DeclareMathOperator{\@shouldTerminate}{shouldTerminate}%
\newSymbol{shouldTerminate}{\ensuremath{\@shouldTerminate}}{shouldTerminate}{%
the termination criterion that turns \codeil{True} when the optimization process can stop and is \codeil{False} until then, see \cref{def:terminationCriterion}}%
%
\newSymbol{nFeasible}{\ensuremath{\#\mathrm{feasible}}}{\#feasible}{%
the number of feasible solutions in the solution space~\solutionSpace, see \cref{def:feasibility}}%
%
\protected\gdef\fitness{\ensuremath{v}}%
%
\newSuperscript{localOptimum}{\ensuremath{\times}}{.*}{the superscript $\times$~symbol denotes that $\circ$ is a local optimum}%
\newSuperscript{globalOptimum}{\ensuremath{\star}}{.*}{the superscript $\star$~symbol denotes that $\circ$ is a global optimum}%
\newSubscript{bestSoFar}{\ensuremath{b}}{.b}{the subscript~$b$ denotes that $\circ$ is the best-so-far element of an optimization process}%
%
\protected\gdef\iteration{\ensuremath{\tau}}%
%
\protected\gdef\algorithmStyle#1{\ensuremath{\mathbf{#1}}}%
%
%
\protected\gdef\selIn{\ensuremath{m}}%
\protected\gdef\selOut{\ensuremath{n}}%
\protected\gdef\eaPopulation{\ensuremath{\mathit{Pop}}}%
%
